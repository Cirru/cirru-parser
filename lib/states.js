// Generated by CoffeeScript 1.6.3
var Buffer, Caret, Indent, Stack;

Caret = (function() {
  function Caret() {
    this.x = 0;
    this.y = 0;
  }

  Caret.prototype.forward = function() {
    return this.x += 1;
  };

  Caret.prototype.newline = function() {
    this.y += 1;
    return this.x = 0;
  };

  Caret.prototype.wrap = function(object) {
    object.x = this.x;
    object.y = this.y;
    return object;
  };

  return Caret;

})();

Buffer = (function() {
  function Buffer() {
    this.text = null;
  }

  Buffer.prototype.add = function(char) {
    if (this.text != null) {
      return this.text += char;
    } else {
      return this.text = char;
    }
  };

  Buffer.prototype.clear = function() {
    return this.text = null;
  };

  Buffer.prototype.out = function() {
    var text;
    text = this.text;
    this.clear();
    return text;
  };

  return Buffer;

})();

Stack = (function() {
  function Stack() {
    this.raw = [];
    this.now = 'empty';
  }

  Stack.prototype.push = function(item) {
    this.raw.push(item);
    return this.now = item.name;
  };

  Stack.prototype.pop = function() {
    this.raw.pop();
    if (this.raw.length > 0) {
      return this.now = this.raw[this.raw.length - 1].name;
    } else {
      return this.now = 'empty';
    }
  };

  return Stack;

})();

Indent = (function() {
  function Indent() {
    this.level = 0;
    this.buffer = 0;
  }

  Indent.prototype.indent = function() {
    return this.level += 1;
  };

  Indent.prototype.dedent = function() {
    this.level -= 1;
    if (this.level < 0) {
      throw new Error('indentation is not <0');
    }
  };

  Indent.prototype.count = function() {
    return this.buffer += 1;
  };

  Indent.prototype.skip = function() {
    return this.buffer = 0;
  };

  Indent.prototype.read = function() {
    var diff, _ref;
    diff = this.buffer - this.level;
    _ref = [this.buffer, 0], this.level = _ref[0], this.buffer = _ref[1];
    if (Math.abs(diff % 2) === 1) {
      throw new Error('odd indentation!');
    }
    if (diff > 0) {
      return {
        type: 'indent',
        step: diff / 2
      };
    } else if (diff < 0) {
      return {
        type: 'dedent',
        step: -diff / 2
      };
    } else {
      return {
        type: 'plain'
      };
    }
  };

  return Indent;

})();

exports.Indent = Indent;

exports.Caret = Caret;

exports.Buffer = Buffer;

exports.Stack = Stack;

/*
//@ sourceMappingURL=states.map
*/
