// Generated by CoffeeScript 1.4.0
var codePart, half, hasContent, indentOf, indents, produce, single, trimRight;

trimRight = function(str) {
  return str.trimRight();
};

hasContent = function(str) {
  return str.length > 0;
};

produce = function(char, n) {
  var _i, _results;
  return (function() {
    _results = [];
    for (var _i = 0; 0 <= n ? _i < n : _i > n; 0 <= n ? _i++ : _i--){ _results.push(_i); }
    return _results;
  }).apply(this).map(function() {
    return char;
  }).join("");
};

indents = function(line) {
  return line.match(/^\s*/)[0];
};

half = function(num) {
  return Math.round(num / 2);
};

indentOf = function(line) {
  return half(indents(line).length);
};

codePart = function(line) {
  return line.trimLeft();
};

single = /^\s{2,}\S+$/;

exports.wrap = function(file) {
  var cache, index, lines, res;
  lines = file.split("\n").map(trimRight).filter(hasContent);
  index = lines.map(indentOf);
  res = [];
  cache = 0;
  lines.forEach(function(line, i) {
    var add_left, add_right, curr, next, prev;
    prev = index[i - 1] || 0;
    curr = index[i];
    next = index[i + 1] || 0;
    add_left = 1;
    add_right = 1;
    if ((curr >= prev) && (curr === next)) {
      if (line.match(single) != null) {
        add_left -= 1;
        add_right -= 1;
      }
    }
    if (curr > prev) {
      add_left += curr - prev - 1;
    }
    if (curr > next) {
      add_right += curr - next;
    } else if (curr < next) {
      add_right -= 1;
    }
    return res.push((indents(line)) + (produce("(", add_left)) + (codePart(line)) + (produce(")", add_right)));
  });
  return res.join("\n");
};
